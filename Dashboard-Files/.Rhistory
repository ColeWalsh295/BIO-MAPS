theme_classic(base_size = 18) +
facet_grid(~Class) +
labs(x = '', y = 'Average Score', color = 'Lab Type') +
scale_color_manual(values = c("#d55e00")) +
scale_x_discrete(labels = c('Pre', 'Post'))
df.mech.stand <- df.mech %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE))
df.pre.Cornell %>%
filter((Class == 'P2213') | (Class == 'P2218')) %>%
group_by(Class_ID) %>%
summarize(Avg = mean(TotalScores), N = n())
df.ECLASS <- fread('C:/Users/Cole/Documents/ECLASS_DATA/ECLASS_Merged_Concat.csv') %>%
mutate(Q3_1_TEXT_x = tolower(Q3_1_TEXT_x),
Q3_2_TEXT_x = tolower(Q3_2_TEXT_x),
Q3_3_TEXT_x = tolower(Q3_3_TEXT_x))
head(df.ECLASS)
df.PLIC.ECLASS <- df.pre.Cornell %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c)) %>%
inner_join(., df.ECLASS, by = c('Class' = 'Course', 'Q5c' = 'Q3_1_TEXT_x', 'Q5b' = 'Q3_2_TEXT_x')) %>%
filter(!duplicated(.[, 'V1_x']))
cor(df.PLIC.ECLASS$TotalScores, df.PLIC.ECLASS$Student_Score_x)
df.pre <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Pre_Valid_Concat_Scored.csv')[Survey == 'C']
df.post <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Post_Valid_Concat_Scored.csv')[Survey == 'C']
ScoresList <- c('Q1Bs', 'Q1Ds', 'Q1Es', 'Q2Bs', 'Q2Ds', 'Q2Es', 'Q3Bs', 'Q3Ds', 'Q3Es', 'Q4Bs')
df.valid <- rbind(df.pre, df.post) %>%
filter(!is.na(TotalScores) & (!is.na(Q3c))) %>%
select(ScoresList, Class_ID)
df.valid[is.na(df.valid)] <- 0
PLIC.model.HYP <- ' models  =~ Q1Bs + Q2Bs + Q3Bs + Q3Ds
methods =~ Q1Ds + Q2Ds + Q4Bs
actions =~ Q1Es + Q2Es + Q3Es '
fit1 <- cfa(PLIC.model.HYP, data = df.valid, std.lv = TRUE, estimator = 'ML')
fit2 <- cfa(PLIC.model.HYP, data = df.valid, std.lv = TRUE, cluster = 'Class_ID')
#summary(fit1, standardized = TRUE, fit.measures = TRUE)
summary(fit2, standardized = TRUE, fit.measures = TRUE)
#parameterEstimates(fit1, standardized = TRUE)
parameterEstimates(fit2, standardized = TRUE)
semPaths(fit1, what = 'diagram', layout = 'tree2', whatLabels = 'std', residuals = FALSE, nCharNodes = 10, edge.color = 'black', edge.label.cex = 1.5, curve = 2, label.scale = FALSE, nodeLabels = c('Q1B', 'Q2B', 'Q3B', 'Q3D', 'Q1D', 'Q2D', 'Q4B', 'Q1E', 'Q2E', 'Q3E', 'Evaluate\nModels', 'Evaluate\nMethods', 'Suggest\nFollow-ups'), rotation = 2, sizeMan = 8, sizeLat = 18, width = 4, height = 5, mar = c(1, 6, 1, 2))
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(Lab_Purpose, levels = c('Reinforce physics concepts',
'Both about equally', 'Develop lab skills')))
df.Matched.courseFY <- df.Matched.course %>%
filter(Lab_Level == 'Intro-Calculus' | Lab_Level == 'Intro-Algebra')
table(df.Matched.courseFY$Lab_Purpose, exclude = NULL)
df.Matched.courseFY %>%
group_by(Lab_Purpose) %>%
summarize(mean(PreScores), mean(PostScores), n())
fit <- lmer(PostScores ~ PreScores_GroupMC + Class_PreScore_GrandMC + Lab_Purpose + (1 | Class_ID), df.Matched.course)
summary(fit)
plot_model(fit, 'eff', show.p = TRUE)
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')
them_set(theme_classic(base_size = 20))
theme_set(theme_classic(base_size = 20))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'Marginal effects of lab purpose on postscores', axis.title = '')$Lab_Purpose
theme_set(theme_classic(base_size = 16))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'Marginal effects of lab purpose on postscores', axis.title = '')$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = '', axis.title = c('Lab Purpose', 'Predicted postscore'))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c(Both about equally = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = list('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(case_when(
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
Lab_Purpose == 'Both about equally' ~ 'Concepts & Skills',
Lab_Purpose == 'Develop lab skills' ~ 'Skills'
), ref = 'Concepts'))
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(case_when(
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
Lab_Purpose == 'Both about equally' ~ 'Concepts & Skills',
Lab_Purpose == 'Develop lab skills' ~ 'Skills'
), levels = c('Concepts', 'Skills', 'Concepts & Skills')))
df.Matched.courseFY <- df.Matched.course %>%
filter(Lab_Level == 'Intro-Calculus' | Lab_Level == 'Intro-Algebra')
table(df.Matched.courseFY$Lab_Purpose, exclude = NULL)
df.Matched.courseFY %>%
group_by(Lab_Purpose) %>%
summarize(mean(PreScores), mean(PostScores), n())
fit <- lmer(PostScores ~ PreScores_GroupMC + Class_PreScore_GrandMC + Lab_Purpose + (1 | Class_ID), df.Matched.course)
summary(fit)
theme_set(theme_classic(base_size = 16))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
library(car)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment) {
df <- fread(File)
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))] %>%
select(Class_Standing, Gender, URM_Status, First_Gen_Status, AP_Calculus_AB, AP_Calculus_BC, ACT_SAT_Math_Percentile, PreScores, PostScores, Season, Sequence, Course_Content, Class) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE))) %>%
filter(!is.na(URM_Status) & !is.na(Class_Standing) & !is.na(ACT_SAT_Math_Percentile))
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
vif(df.PLIC.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
vif(df.ECLASS.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
vif(df.MBT.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
vif(df.CSEM.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM')) %>%
filter(term == 'GenderF' | term == 'URM_StatusURM' | term == 'Class_StandingBFY' | term == 'First_Gen_StatusFirstGen') %>%
mutate(Model = as.character(Model),
Assessment = factor(Assessment, levels = c('MBT', 'CSEM', 'E-CLASS', 'PLIC')))
ggplot(Coefs, aes(x = Model, y = estimate, group = term, color = term)) +
geom_point(aes(shape = term), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15,
size = 1) +
geom_line(size = 1) +
facet_grid(rows = vars(Assessment), scales = "free") +
theme_classic(base_size = 16) +
theme(legend.title = element_blank()) +
scale_color_discrete(labels = c('Class standing', 'First-gen status', 'Gender', 'URM status')) +
ylab('Coefficient')
# ggplot(Coefs, aes(x = Model, y = estimate, group = Assessment, color = Assessment)) +
#   geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
#   geom_line() +
#   facet_grid(cols = vars(term))
df.MBT.fit5.lm <- lm(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Class, data = df.MBT)
summary(df.MBT.fit5$model)
stargazer(df.MBT.fit5$model, df.MBT.fit5.lm, intercept.bottom = FALSE, out = paste('MBT_LMcomp.tex'), intercept.top = TRUE, omit.stat = 'all')
df.PLIC.fit5.lm <- lm(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + Class, data = df.PLIC)
summary(df.PLIC.fit5.lm)
library(tidyverse)
library(data.table)
library(openxlsx)
library(lavaan)
library(semPlot)
library(effsize)
library(lmerTest)
library(sjPlot)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
set.theme <- theme_classic(base_size = 20)
df.Matched <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv')
df.Matched2 <- df.Matched %>% filter(Survey_x == 'C' | Survey_y == 'C')
7033-6836
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
df.Class2 <- callModule(DownloadClassData, 'Class2.Download', data = df, header = header.df,
cols = cols, ass = Assessment)
shiny::runApp()
runApp()
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
library(effsize)
library(lsr)
library(lme4)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lavaan)
library(semPlot)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE, Collapse.vars = FALSE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# unique(df$School)
# Gender non-binaries?
table(df$Gender, exclude = NULL)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# Filter by student demographics
df <- df %>%
filter(!is.na(Gender) & !is.na(Ethnicity) & !is.na(Major))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- data.table(df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),
.(Class_ID)]
data.frame(df[pre.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
# df[post.rate == 0 & !duplicated(Class_ID)]$Class_ID
data.frame(df[post.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
df <- df[pre.rate >= 0.4 & post.rate >= 0.4]
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- df[Survey_x == 'C' & Survey_y == 'C']
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
table(df[!duplicated(df$School),]$Institution_Type, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Level, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Purpose, exclude = NULL)
df <- df %>%
mutate(Lab_Purpose = relevel(as.factor(Lab_Purpose), ref = 'Reinforce physics concepts'))
df.Centered <- Create.Class.Variables(df)
df.Centered$GenW <- df.Centered$Gender == 'Women'
df.Centered$MajorEng <- df.Centered$Major == 'Engineering'
df.Centered$MajorPhys <- df.Centered$Major == 'Physics'
table(df.Centered$Gender, exclude = NULL)
table(df.Centered$URM_Status)
table(df.Centered$Major)
table(df.Centered$Lab_Level, exclude = NULL)
table(df.Centered$Lab_Purpose, exclude = NULL)
table(df.Centered$Gender, df.Centered$Lab_Level)
table(df.Centered$URM_Status, df.Centered$Lab_Level)
table(df.Centered$Major, df.Centered$Lab_Level)
table(df.Centered$Gender, df.Centered$Lab_Purpose)
table(df.Centered$URM_Status, df.Centered$Lab_Purpose)
table(df.Centered$Major, df.Centered$Lab_Purpose)
Desc.stats <- function(df, var){
df %>%
group_by_(var) %>%
summarize(n(), mean(PreScores), sd(PreScores)/sqrt(n()), mean(PostScores), sd(PostScores)/sqrt(n()))
}
Desc.stats(df.Centered, 'Gender')
Desc.stats(df.Centered, 'URM_Status')
Desc.stats(df.Centered, 'Major')
Desc.stats(df.Centered, 'Lab_Level')
Desc.stats(df.Centered, 'Lab_Purpose')
mod.null <- lmer(PostScores ~ (1 | School/Class_ID), df.Centered)
summary(mod.null)
r.squaredGLMM(mod.null)
mod.main <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + Gender + URM_Status + Major + Lab_Purpose + Lab_Level + (1 | School/Class_ID), df.Centered)
summary(mod.main)
r.squaredGLMM(mod.main)
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
summary(mod.interaction)
r.squaredGLMM(mod.interaction)
class(mod.null) <- "lmerMod"
class(mod.main) <- "lmerMod"
class(mod.interaction) <- "lmerMod"
stargazer(mod.null, mod.main, mod.interaction, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = 'Results.tex', intercept.top = TRUE, omit.stat = 'all')
tidy(mod.interaction)
library(broom)
library(broom.mixed)
tidy(mod.interaction)
library(sjPlot)
plot_model(mod.interaction)
plot_model(mod.interaction, type = 'eff')
plot_model(mod.interaction, type = 'eff')$Gender
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'eff')$Gender
plot_model(mod.interaction, type = 'int')$Gender
plot_model(mod.interaction, type = 'int')
plot_model(mod.interaction, type = 'pred')
plot_model(mod.interaction, type = 'pred')
df <- df %>%
mutate(ender = relevel(as.factor(Gender), ref = 'Men'),
URM_Status = relevel(as.factor(URM_Status), ref = 'URM'),
URM_Status = relevel(as.factor(Major), ref = 'Other'),
LabLevel = relevel(as.factor(Lab_Level), ref = 'Intro-Algebra'),
Lab_Purpose = relevel(as.factor(Lab_Purpose), ref = 'Reinforce physics concepts'))
df.Centered <- Create.Class.Variables(df)
df.Centered$GenW <- df.Centered$Gender == 'Women'
df.Centered$MajorEng <- df.Centered$Major == 'Engineering'
df.Centered$MajorPhys <- df.Centered$Major == 'Physics'
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
summary(mod.main)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# Filter by student demographics
df <- df %>%
filter(!is.na(Gender) & !is.na(Ethnicity) & !is.na(Major))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE, Collapse.vars = FALSE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
library(broom.mixed)
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
library(effsize)
library(lsr)
library(lme4)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lavaan)
library(semPlot)
library(broom.mixed)
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
library(effsize)
library(lsr)
library(lme4)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lavaan)
library(semPlot)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE, Collapse.vars = FALSE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# unique(df$School)
# Gender non-binaries?
table(df$Gender, exclude = NULL)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# Filter by student demographics
df <- df %>%
filter(!is.na(Gender) & !is.na(Ethnicity) & !is.na(Major))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- data.table(df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),
.(Class_ID)]
data.frame(df[pre.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
# df[post.rate == 0 & !duplicated(Class_ID)]$Class_ID
data.frame(df[post.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
df <- df[pre.rate >= 0.4 & post.rate >= 0.4]
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- df[Survey_x == 'C' & Survey_y == 'C']
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
table(df[!duplicated(df$School),]$Institution_Type, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Level, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Purpose, exclude = NULL)
df <- df %>%
mutate(ender = relevel(as.factor(Gender), ref = 'Men'),
URM_Status = relevel(as.factor(URM_Status), ref = 'URM'),
Major = relevel(as.factor(Major), ref = 'Other'),
LabLevel = relevel(as.factor(Lab_Level), ref = 'Intro-Algebra'),
Lab_Purpose = relevel(as.factor(Lab_Purpose), ref = 'Reinforce physics concepts'))
df.Centered <- Create.Class.Variables(df)
df.Centered$GenW <- df.Centered$Gender == 'Women'
df.Centered$MajorEng <- df.Centered$Major == 'Engineering'
df.Centered$MajorPhys <- df.Centered$Major == 'Physics'
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
library(sjPlot)
plot_model(mod.interaction, type = 'pred')
plot_model(mod.interaction, type = 'pred')$Gender
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'pred')
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'pred')
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'int')
plot_model(mod.interaction, type = 'pred', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'pred', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
class(mod.interaction) <- "lmerMod"
plot_model(mod.interaction, type = 'pred', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lm(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level, df.Centered)
plot_model(mod.interaction, type = 'pred', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'pred', terms = c('Gender', 'Lab_Purpose'))
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lm(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level, df.Centered)
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'))
mod.interaction <- lmer(PostScores ~ PreScores.cwc + PreScores.cm + (Gender + URM_Status) * Lab_Purpose + Major + Lab_Level + (1 | School/Class_ID), df.Centered)
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'))
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'), dot.size = 6, line.size = 1, ci.lvl = 0.95, title = '')
plot_model(mod.interaction, type = 'eff', terms = c('Gender', 'Lab_Purpose'), dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '')
plot_model(mod.interaction, type = 'eff', terms = c('URM_Status', 'Lab_Purpose'), dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '')
theme_set(theme_classic(base_size = 10))
plot_model(mod.interaction, type = 'eff', terms = c('URM_Status', 'Lab_Purpose'), dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '')
