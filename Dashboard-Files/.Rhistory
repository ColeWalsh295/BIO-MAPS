# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
df.pre <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Pre_Valid_Concat_Scored.csv')[Survey == 'C']
Class.1112 <- c('R_2xOT2Y1NtNiseCk', 'R_1LHvn3R5Afj8eUc', 'R_3ijRcPfXo8MUfFj', 'R_RKRNIWFu1gZuSPf', 'R_9EVBSZgwQyP6mWZ')
Class.1116 <- c('R_1Oko8BpPfb9rt0G', 'R_2R8MnTyv2jFgPzA', 'R_1IB300CxBKh0Tw7')
Class.2213 <- c('R_zfk080BHz6RWixb', 'R_31hmnBMkK3Bvc3z')
Class.2214 <- c('R_yvBX55C72Ye8W1b', 'R_2DTys2sMNEPNUas', 'R_2q7Q3roxosv6Iat')
Class.2218 <- c('R_2Y4jnzAgBixC4Qm', 'R_1pyQ0Ym19YJPe3Q')
Class.510 <- c('R_2E3I53tWJ18Yrh1', 'R_1QDH836nn3XsCEC', 'R_2XhpZkn4DGP598r')
Class.Maine121 <- c('R_2t4FRFtgLNCF2Ng', 'R_33svFR3Dzit5gMP', 'R_eDQgZq5IOwNJ0SB', 'R_3Htp7Nwv07ZMNz5')
Class.App2210 <- c('R_6VuzaPTgCFmgEmJ', 'R_2zCk6102XCLdPVx')
Class.RIT316 <- c('R_3383bqp4hOSfVs6', 'R_1jB7mHGYxH4Hgi8')
Class.SFU233 <- c('R_2Sk1pkrUVnNsFyh', 'R_3kNzLJWZjV68mK7')
Class.Kansas216 <- c('R_DnPBuVnC0UjmC1b', 'R_1eRcOhZpre7mhcC')
Class.Agnes <- c('R_1n7wUeClpEuZOkp', 'R_2Cmq05OZWF8UESV')
Class.BYU108 <- c('R_22ufgL2VQq1l4Ft', 'R_3KIXxDs5O6DnoMq')
Class.Lewis36500 <- c('R_1PRvAep4UEZKmoi', 'R_27CipGINp6thKIv')
Class.RIT315 <- c('R_2ZHxPCqVAMndXfg', 'R_3m1NHkNcsBNgfe6')
Class.Salem <- c('R_sRwOfzbp6ufaWU9', 'R_2cC5NePDupfT60Q')
Class.Kansas316 <- c('R_3FLrT3FNDbu41vG', 'R_3DvXkKcsXGosQmN')
Class.Penn457 <- c('R_2e4l3ULT10sYMsf', 'R_24q0K2G7CvLBC90', 'R_3q88ROCl8ybpqTf')
Class.Bethel292 <- c('R_1E6g9AAGCZcNC4z', 'R_XH3AUfCAn0ph6Hn')
Class.Barnard <- c('R_2dpdvS27mTkVwG3', 'R_2Cx014FHcWCOw9u')
Classes <- list(Class.1112, Class.1116, Class.2213, Class.2214, Class.2218, Class.510, Class.Maine121, Class.App2210, Class.RIT316, Class.SFU233, Class.Kansas216, Class.Agnes, Class.BYU108, Class.Lewis36500, Class.RIT315, Class.Salem, Class.Kansas316, Class.Penn457, Class.Bethel292, Class.Barnard)
i = 1
for(class in Classes){
df.pre <- df.pre[Class_ID %in% class, Class := as.character(i)]
i = i + 1
}
for(j in 1:(i - 1)){
print(j)
df <- df.pre %>%
filter(Class == j)
print(anova(lm(TotalScores ~ Class_ID, df)))
}
df.pre <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Pre_Valid_Concat_Scored.csv')[Survey == 'C']
Class.1112 <- c('R_2xOT2Y1NtNiseCk', 'R_1LHvn3R5Afj8eUc', 'R_3ijRcPfXo8MUfFj', 'R_RKRNIWFu1gZuSPf', 'R_9EVBSZgwQyP6mWZ')
Class.1116 <- c('R_1Oko8BpPfb9rt0G', 'R_2R8MnTyv2jFgPzA', 'R_1IB300CxBKh0Tw7')
Class.2213 <- c('R_zfk080BHz6RWixb', 'R_31hmnBMkK3Bvc3z')
Class.2214 <- c('R_yvBX55C72Ye8W1b', 'R_2DTys2sMNEPNUas', 'R_2q7Q3roxosv6Iat')
Class.2218 <- c('R_2Y4jnzAgBixC4Qm', 'R_1pyQ0Ym19YJPe3Q')
Class.510 <- c('R_2E3I53tWJ18Yrh1', 'R_1QDH836nn3XsCEC', 'R_2XhpZkn4DGP598r')
Class.Maine121 <- c('R_2t4FRFtgLNCF2Ng', 'R_33svFR3Dzit5gMP', 'R_eDQgZq5IOwNJ0SB', 'R_3Htp7Nwv07ZMNz5')
Class.App2210 <- c('R_6VuzaPTgCFmgEmJ', 'R_2zCk6102XCLdPVx')
Class.RIT316 <- c('R_3383bqp4hOSfVs6', 'R_1jB7mHGYxH4Hgi8')
Class.SFU233 <- c('R_2Sk1pkrUVnNsFyh', 'R_3kNzLJWZjV68mK7')
Class.Kansas216 <- c('R_DnPBuVnC0UjmC1b', 'R_1eRcOhZpre7mhcC')
Class.Agnes <- c('R_1n7wUeClpEuZOkp', 'R_2Cmq05OZWF8UESV')
Class.BYU108 <- c('R_22ufgL2VQq1l4Ft', 'R_3KIXxDs5O6DnoMq')
Class.Lewis36500 <- c('R_1PRvAep4UEZKmoi', 'R_27CipGINp6thKIv')
Class.RIT315 <- c('R_2ZHxPCqVAMndXfg', 'R_3m1NHkNcsBNgfe6')
Class.Salem <- c('R_sRwOfzbp6ufaWU9', 'R_2cC5NePDupfT60Q')
Class.Kansas316 <- c('R_3FLrT3FNDbu41vG', 'R_3DvXkKcsXGosQmN')
Class.Penn457 <- c('R_2e4l3ULT10sYMsf', 'R_24q0K2G7CvLBC90', 'R_3q88ROCl8ybpqTf')
Class.Bethel292 <- c('R_1E6g9AAGCZcNC4z', 'R_XH3AUfCAn0ph6Hn')
Class.Barnard <- c('R_2dpdvS27mTkVwG3', 'R_2Cx014FHcWCOw9u')
Classes <- list(Class.1112, Class.1116, Class.2213, Class.2214, Class.2218, Class.510, Class.Maine121, Class.App2210, Class.RIT316, Class.SFU233, Class.Kansas216, Class.Agnes, Class.BYU108, Class.Lewis36500, Class.RIT315, Class.Salem, Class.Kansas316, Class.Penn457, Class.Bethel292, Class.Barnard)
i = 1
for(class in Classes){
df.pre <- df.pre[Class_ID %in% class, Class := as.character(i)]
i = i + 1
}
for(j in 1:(i - 1)){
print(j)
df <- df.pre %>%
filter(Class == j)
print(anova(lm(TotalScores ~ Class_ID, df)))
}
df.pre <- df.pre %>%
mutate(Class = case_when(
Class == 1 ~ 'P1112',
Class == 2 ~ 'P1116',
Class == 3 ~ 'P2213',
Class == 4 ~ 'P2214',
Class == 5 ~ 'P2218',
Class == 6 ~ 'P510',
TRUE ~ Class
))
df.pre.Cornell  <- df.pre %>%
filter(grepl('P', Class))
df.pre.Cornell.sum <- df.pre.Cornell %>%
group_by(Class_ID) %>%
summarize(Class = Class[1], Avg = mean(TotalScores), ci.low = Avg - 1.96 * sd(TotalScores)/sqrt(n()), ci.high = Avg + 1.96 * sd(TotalScores)/sqrt(n()))
data_summary <- function(x) {
m <- mean(x)
ymin <- m - 1.96 * sd(x)/sqrt(length(x))
ymax <- m + 1.96 * sd(x)/sqrt(length(x))
return(c(y = m,ymin = ymin, ymax = ymax))
}
ggplot(df.pre.Cornell, aes(x = Class_ID, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
facet_grid(~Class, scales = 'free') +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(df.pre.Cornell, aes(x = Class_ID, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
facet_grid(~Class, scales = 'free') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(df.pre.Cornell, aes(x = Class_ID, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
facet_grid(~Class, scales = 'free') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
ylab('Prescores')
ggplot(df.pre.Cornell, aes(x = Class_ID, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
facet_grid(~Class, scales = 'free') +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
ylab('Prescores')
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2)
df.Experts %>%
group_by(Experts) %>%
summarize(Avg = mean(TotalScores), std = sd(TotalScores)/sqrt(n()), N = n())
t.test(TotalScores ~ Experts, df.Experts)
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic()
data_summary <- function(x) {
m <- mean(x)
ymin <- m - 1.96 * sd(x)/sqrt(length(x))
ymax <- m + 1.96 * sd(x)/sqrt(length(x))
return(c(y = m,ymin = ymin, ymax = ymax))
}
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2)
df.Experts %>%
group_by(Experts) %>%
summarize(Avg = mean(TotalScores), std = sd(TotalScores)/sqrt(n()), N = n())
t.test(TotalScores ~ Experts, df.Experts)
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic()
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic() +
ylab('Total Score')
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2) %>%
mutate(Experts = relevel(Experts, ref = 'Original'))
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2) %>%
mutate(Experts = relevel(as.factor(Experts), ref = 'Original'))
df.Experts %>%
group_by(Experts) %>%
summarize(Avg = mean(TotalScores), std = sd(TotalScores)/sqrt(n()), N = n())
t.test(TotalScores ~ Experts, df.Experts)
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic() +
ylab('Total Score')
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic() +
theme(axis.title.x = element_blank()) +
ylab('Total Score')
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original 78 Experts') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New 18 Experts') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2) %>%
mutate(Experts = relevel(as.factor(Experts), ref = 'Original'))
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original 78 Experts') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New 18 Experts') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2) %>%
mutate(Experts = relevel(as.factor(Experts), ref = 'Original 78 Experts'))
df.Experts %>%
group_by(Experts) %>%
summarize(Avg = mean(TotalScores), std = sd(TotalScores)/sqrt(n()), N = n())
t.test(TotalScores ~ Experts, df.Experts)
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic() +
theme(axis.title.x = element_blank()) +
ylab('Total Score')
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic() +
theme(axis.title.x = element_blank()) +
ylab('Total Score')
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment) {
df <- fread(File)
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))] %>%
select(Class_Standing, Gender, URM_Status, First_Gen_Status, AP_Calculus_AB, AP_Calculus_BC, ACT_SAT_Math_Percentile, PreScores, PostScores, Season, Sequence, Course_Content, Class) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE))) %>%
filter(!is.na(URM_Status) & !is.na(Class_Standing) & !is.na(ACT_SAT_Math_Percentile))
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM')) %>%
filter(term == 'GenderF' | term == 'URM_StatusURM' | term == 'Class_StandingBFY' | term == 'First_Gen_StatusFirstGen') %>%
mutate(Model = as.character(Model))
Coefs
ggplot(Coefs, aes(x = Model, y = estimate, group = term, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = term, y = estimate, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(cols = vars(Model))
ggplot(Coefs, aes(x = Model, y = estimate, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(cols = vars(term))
ggplot(Coefs, aes(x = Model, y = estimate, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(cols = vars(term))
ggplot(Coefs, aes(x = Model, y = estimate, group = Asessment, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(cols = vars(term))
ggplot(Coefs, aes(x = Model, y = estimate, group = Assessment, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(cols = vars(term))
ggplot(Coefs, aes(x = Model, y = estimate, group = Assessment, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(cols = vars(term))
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
