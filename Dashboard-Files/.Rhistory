(Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus') ~ 'FY',
(Lab_Level == 'Sophomore') | (Lab_Level == 'Junior') | (Lab_Level == 'Senior') ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'))
df.Centered <- Create.Class.Variables(df.Course %>% mutate(PreScores = TotalScores))
df.Centered$GenW <- df.Centered$Gender == 'Women'
df.Centered$MajorEng <- df.Centered$Major == 'Engineering'
df.Centered$MajorPhys <- df.Centered$Major == 'Physics'
table(df.Centered$Major)
table(df.Centered$Lab_Level, exclude = NULL)
table(df.Centered$Gender, exclude = NULL)
table(df.Centered$Gender, df.Centered$Major)
table(df.Centered$Gender, df.Centered$Lab_Level)
table(df.Centered$URM_Status)
table(df.Centered$URM_Status, df.Centered$Major)
table(df.Centered$URM_Status, df.Centered$Lab_Level)
Desc.stats <- function(df, var){
df %>%
group_by_(var) %>%
summarize(n(), mean(TotalScores), sd(TotalScores)/sqrt(n()))
}
Desc.stats(df.Centered, 'Gender')
Desc.stats(df.Centered, 'URM_Status')
Desc.stats(df.Centered, 'Major')
Desc.stats(df.Centered, 'Class_Standing')
t.test(TotalScores ~ Gender, df.Centered)
cohen.d(TotalScores ~ Gender, df.Centered)
t.test(TotalScores ~ URM_Status, df.Centered)
cohen.d(TotalScores ~ URM_Status, df.Centered)
mod_null <- lmer(Pre ~ (1 | Class_ID), df.Centered)
mod_null <- lmer(TotalScores ~ (1 | Class_ID), df.Centered)
summary(mod_null)
r.squaredGLMM(mod_null)
mod_student <- lmer(TotalScores ~ Gender + Major + URM_Status + (1 | Class_ID), df.Centered)
summary(mod_student)
r.squaredGLMM(mod_student)
mod_course <- lmer(TotalScores ~ Gender + Major + URM_Status + Lab_Level + (1 | Class_ID), df.Centered)
summary(mod_course)
r.squaredGLMM(mod_course)
mod_interaction <- lmer(TotalScores ~ Gender*URM_Status + Major + Lab_Level + (1 | Class_ID), df.Centered)
summary(mod_interaction)
r.squaredGLMM(mod_interaction)
mod_interactionMajor <- lmer(TotalScores ~ (Gender + URM_Status)*Major + Lab_Level + (1 | Class_ID), df.Centered)
summary(mod_interactionMajor)
r.squaredGLMM(mod_interactionMajor)
class(mod_null) <- "lmerMod"
class(mod_student) <- "lmerMod"
class(mod_course) <- "lmerMod"
class(mod_interaction) <- "lmerMod"
class(mod_interactionMajor) <- "lmerMod"
stargazer(mod_null, mod_student, mod_course, mod_interaction, mod_interactionMajor, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = 'Pre.html', intercept.top = TRUE, omit.stat = 'all')
model <- '
level: 1
# measurement model
Conf =~ Q7a_10 + Q7a_11 + Q7a_12 + Q7a_13
Att =~ Q7b_1 + Q7b_2 + Q7b_4
Eff =~ Q7c_1 + Q7c_2 + Q7b_3
# regressions
Conf ~ GenW + URM_Status
Att ~ GenW + URM_Status
Eff ~ GenW + URM_Status
TotalScores ~ GenW + URM_Status + MajorEng + MajorPhys + Conf + Att + Eff
level: 2
TotalScores ~ Lab_Level
'
#fit <- sem(model, data = PLIC.PreOnly)
fit <- sem(model, data = df.Centered, cluster = 'Class_ID')
summary(fit, standardized = TRUE, fit.measures = TRUE, modindices = TRUE)
semPaths(fit, whatLabels = 'stand')
table(df.Centered$Q7a_10, exclude = NULL)
table(df.Centered$Q7a_11, exclude = NULL)
table(df.Centered$Q7a_12, exclude = NULL)
table(df.Centered$Q7a_13, exclude = NULL)
table(df.Centered$Q7a_14, exclude = NULL)
model <- '
level: 1
# measurement model
Conf =~ Q7a_10 + Q7a_11  + Q7a_13
Att =~ Q7b_1 + Q7b_2 + Q7b_3 + Q7b_4
Eff =~ Q7c_1 + Q7c_2 + Q7b_3
# regressions
Conf ~ GenW + URM_Status
Att ~ GenW + URM_Status
Eff ~ GenW + URM_Status
TotalScores ~ GenW + URM_Status + MajorEng + MajorPhys + Conf + Att + Eff
level: 2
TotalScores ~ Lab_Level
'
#fit <- sem(model, data = PLIC.PreOnly)
fit <- sem(model, data = df.Centered, cluster = 'Class_ID')
summary(fit, standardized = TRUE, fit.measures = TRUE, modindices = TRUE)
# semPaths(fit, whatLabels = 'stand')
df.MC <- df.Centered %>%
filter(!is.na(Q3c) & !is.na(Q4a)) %>%
mutate(Q3C.Score = ifelse(Q3c == 2, 1, 0),
Q4A.Score = ifelse(Q4a == 2, 1, 0),
MC.Score = Q3C.Score + Q4A.Score)
t.test(df.MC$MC.Score ~ df.MC$Gender)
t.test(df.MC$MC.Score ~ df.MC$URM_Status)
PLIC.Likert <- df.Centered %>%
filter(!is.na(Q2c) & !is.na(Q3a)) %>%
mutate(Q2C.Score = case_when(
Q2c_x > 3 ~ 1,
Q2c_x < 3 ~ -1,
Q2c_x == 3 ~ 0
),
Q3A.Score = case_when(
Q3a_x < 3 ~ 1,
Q3a_x > 3 ~ -1,
Q3a_x == 3 ~ 0
),
Likert.Score = Q2C.Score + Q3A.Score)
PLIC.Likert <- df.Centered %>%
filter(!is.na(Q2c) & !is.na(Q3a)) %>%
mutate(Q2C.Score = case_when(
Q2c > 3 ~ 1,
Q2c < 3 ~ -1,
Q2c == 3 ~ 0
),
Q3A.Score = case_when(
Q3a < 3 ~ 1,
Q3a > 3 ~ -1,
Q3a == 3 ~ 0
),
Likert.Score = Q2C.Score + Q3A.Score)
t.test(PLIC.Likert$Likert.Score ~ PLIC.Likert$Gender)
t.test(PLIC.Likert$Likert.Score ~ PLIC.Likert$URM_Status)
df.FR <- df.Student %>%
filter(Survey == 'F') %>%
filter(PreScores != 0)
df.FR <- df.Student %>%
filter(Survey == 'F') %>%
filter(TotalScores != 0)
hist(df.FR$PreScores, breaks = 10)
df.FR <- df.Student %>%
filter(Survey == 'F') %>%
filter(TotalScores != 0)
hist(df.FR$TotalScores, breaks = 10)
t.test(df.FR$TotalScores ~ df.FR$Gender)
t.test(df.FR$TotalScores ~ df.FR$URM_Status)
cohen.d(df.FR$TotalScores ~ df.FR$Gender)
cohen.d(df.FR$TotalScores ~ df.FR$URM_Status)
library(tidyverse)
library(xlsx)
source('FuzzyKappa.R', local = TRUE)
OthersList <- c('Q1b_19', 'Q1d_10', 'Q1e_12', 'Q2b_38', 'Q2d_11', 'Q2e_11', 'Q3b_10', 'Q3d_29', 'Q3e_8', 'Q4b_11')
df.NH <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/NH/Fall2017_Cornell_University_1116_Smith_POST_new_FR_NH.xlsx', sheetName = 1)
df.NH <- df.NH[2:nrow(df.NH),] %>%
select(grep('(Q2e_[0-9]*$)', names(.))) %>%
select(-Q2e_11)
df.CW <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/CW/Fall2017_Cornell_University_1116_Smith_POST_new_FR_CW.xlsx', sheetName = 1)
df.CW <- df.CW[2:nrow(df.CW),] %>%
select(grep('(Q2e_[0-9]*$)', names(.))) %>%
select(-Q2e_11)
df.NH[!is.na(df.NH)] <- 1
df.CW[!is.na(df.CW)] <- 1
df.CW <- data.frame(sapply(df.CW, as.numeric))
df.NH <- data.frame(sapply(df.NH, as.numeric))
df.NH[is.na(df.NH)] <- 0
df.CW[is.na(df.CW)] <- 0
Fuzzy.Kappa(df.CW, df.NH)
library(tidyverse)
library(xlsx)
source('FuzzyKappa.R', local = TRUE)
OthersList <- c('Q1b_19', 'Q1d_10', 'Q1e_12', 'Q2b_38', 'Q2d_11', 'Q2e_11', 'Q3b_10', 'Q3d_29', 'Q3e_8', 'Q4b_11')
df.NH <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/NH/Fall2017_Cornell_University_1116_Smith_POST_new_FR_NH.xlsx', sheetName = 1)
df.NH <- df.NH[2:nrow(df.NH),] %>%
select(grep('(Q2e_[0-9]*$)', names(.))) %>%
select(-Q2e_11)
df.CW <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/CW/Fall2017_Cornell_University_1116_Smith_POST_new_FR_CW.xlsx', sheetName = 1)
df.CW <- df.CW[2:nrow(df.CW),] %>%
select(grep('(Q2e_[0-9]*$)', names(.))) %>%
select(-Q2e_11)
df.NH[!is.na(df.NH)] <- 1
df.CW[!is.na(df.CW)] <- 1
df.CW <- data.frame(sapply(df.CW, as.numeric))
df.NH <- data.frame(sapply(df.NH, as.numeric))
df.NH[is.na(df.NH)] <- 0
df.CW[is.na(df.CW)] <- 0
Fuzzy.Kappa(df.CW, df.NH)
OthersList <- c('Q1b_19', 'Q1d_10', 'Q1e_12', 'Q2b_38', 'Q2d_11', 'Q2e_11', 'Q3b_10', 'Q3d_29', 'Q3e_8', 'Q4b_11')
df.NH <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/NH/Fall2017_Cornell_University_1116_Smith_POST_new_FR_NH.xlsx', sheetName = 1)
df.NH <- df.NH[2:nrow(df.NH),] %>%
select(-OthersList)
OthersList <- c('Q1b_19', 'Q1d_10', 'Q1e_12', 'Q2b_38', 'Q2d_11', 'Q2e_11', 'Q3b_10', 'Q3d_29', 'Q3e_8', 'Q4b_11')
df.NH <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/NH/Fall2017_Cornell_University_1116_Smith_POST_new_FR_NH.xlsx', sheetName = 1)
df.NH <- df.NH[2:nrow(df.NH),] %>%
select(-which(names(.) %in% OthersList))
df.CW <- read.xlsx('C:/Users/Cole/Documents/GRA_Fall2017/FR_Coding/Coded/CW/Fall2017_Cornell_University_1116_Smith_POST_new_FR_CW.xlsx', sheetName = 1)
df.CW <- df.CW[2:nrow(df.CW),] %>%
select(-which(names(.) %in% OthersList))
df.NH[!is.na(df.NH)] <- 1
df.CW[!is.na(df.CW)] <- 1
df.CW <- data.frame(sapply(df.CW, as.numeric))
df.NH <- data.frame(sapply(df.NH, as.numeric))
df.NH[is.na(df.NH)] <- 0
df.CW[is.na(df.CW)] <- 0
df.CW
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', names(df.CW)))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', names(df.NH)))])
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)'), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', names(df.NH))])
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)'), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)'), names(df.NH))])
}
grep(paste('(', Q, '_[0-9]*$)'), names(df.NH))
grep(paste('(', 'Q1b', '_[0-9]*$)'), names(df.NH))
grep(paste('(', 'Q1b', '_[0-9]*$)'), names(df.NH))
grep(paste('(Q1b_[0-9]*$)'), names(df.NH))
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)'), names(df.CW), sep = '')],
df.NH[, grep(paste('(', Q, '_[0-9]*$)'), names(df.NH), sep = '')])
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.NH))])
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3d', 'Q3e', 'Q4b')){
print(Q)
print(Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.NH))]))
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3c', 'Q3d', 'Q4b')){
print(Q)
print(Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.NH))]))
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3c', 'Q3d', 'Q4b_*')){
print(Q)
print(Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.NH))]))
}
for(Q in c('Q1b', 'Q1d', 'Q1e', 'Q2b', 'Q2d', 'Q2e', 'Q3b', 'Q3c', 'Q3d')){
print(Q)
print(Fuzzy.Kappa(df.CW[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.CW))],
df.NH[, grep(paste('(', Q, '_[0-9]*$)', sep = ''), names(df.NH))]))
}
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt')
df
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
df
df %>%
summarize(mean(abs(H.A - Truth)))
library(tidyverse)
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
df %>%
summarize(mean(abs(H.A - Truth)))
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
df %>%
summarize(H.A.predError = mean(abs(H.A - Truth)), H.B.predError = mean(abs(H.B - Truth)))
# Prediction Error
df %>%
summarize(H.A.predError = mean(abs(H.A - Truth)), H.B.predError = mean(abs(H.B - Truth)), N = n())
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
# Prediction Error
df %>%
summarize(H.A.predError = sum(abs(H.A - Truth)), H.B.predError = sum(abs(H.B - Truth)), N = n()) #%>%
#summarzie(H.A.predError = H.A.predError,
#          H.B.predLow = H.A.predError - sqrt(log2(2/)),
#          H.B.predError = H.B.predError)
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
# Prediction N
df.sum <- df %>%
summarize(H.A.error = sum(abs(H.A - Truth)), H.B.error = sum(abs(H.B - Truth)), m = n())
df.sum %>%
summarize(H.A.rate = H.A.error/m,
H.A.rateLow = H.A.error/m - sqrt(log2(2/0.05)/(2 * m)),
H.A.rateHigh = H.A.error/m + sqrt(log2(2/0.05)/(2 * m)),
H.B.rate = H.B.error/m,
H.A.rateLow = H.B.error/m - sqrt(log2(2/0.05)/(2 * m)),
H.A.rateHigh = H.B.error/m + sqrt(log2(2/0.05)/(2 * m)))
df <- read.delim('C:/Users/Cole/Documents/GRA_Fall2019/CS5780/HW2/hyp_test_pred.txt', col.names = c('Truth', 'H.A', 'H.B'))
# Prediction N
df.sum <- df %>%
summarize(H.A.error = sum(abs(H.A - Truth)), H.B.error = sum(abs(H.B - Truth)), m = n())
df.sum %>%
summarize(H.A.rate = H.A.error/m,
H.A.rateLow = H.A.error/m - sqrt(log2(2/0.05)/(2 * m)),
H.A.rateHigh = H.A.error/m + sqrt(log2(2/0.05)/(2 * m)),
H.B.rate = H.B.error/m,
H.B.rateLow = H.B.error/m - sqrt(log2(2/0.05)/(2 * m)),
H.B.rateHigh = H.B.error/m + sqrt(log2(2/0.05)/(2 * m)))
df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth)) %>%
table(.[, 'H.A.correct'], .[, 'H.B.correct'])
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
install.packages("pracma")
install.packages("pracma")
install.packages("pracma")
lchoose(9, 0)
lchoose(9, 1)
sapply(1:9, function(k) lchoose(9, k))
sum(sapply(1:9, function(k) lchoose(9, k)))
2*(0.5^9)*sum(sapply(1:9, function(k) lchoose(9, k)))
dbinom(9, size = 24, prob = 0.5)
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
2*(0.5^9)*sum(sapply(1:9, function(k) lchoose(9, k)))
dbinom(9, size = 24, prob = 0.5)
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
2*(0.5^9)*sum(sapply(1:9, function(k) lchoose(9, k)))
pbinom(9, size = 24, prob = 0.5)
dbinom(1, size = 9, prob = 0.5)
pbinom(1, size = 9, prob = 0.5)
binom(1, size = 9, prob = 0.5)
dbinom(1, size = 9, prob = 0.5)
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
2*(0.5^24)*sum(sapply(1:9, function(k) lchoose(24, k)))
pbinom(9, size = 24, prob = 0.5)
dbinom(9, size = 24, prob = 0.5)
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
2*(0.5^24)*sum(sapply(1:9, function(k) lchoose(24, k)))
dbinom(9, size = 24, prob = 0.5)
sapply(1:9, function(k) lchoose(24, k))
2*(0.5^24)*sum(sapply(15:24, function(k) lchoose(24, k)))
2*(0.5^24)*sum(sapply(1:9, function(k) lchoose(24, k)))
dbinom(15, size = 24, prob = 0.5)
dbinom(24, size = 24, prob = 0.5)
dbinom(23, size = 24, prob = 0.5)
dbinom(22, size = 24, prob = 0.5)
dbinom(21, size = 24, prob = 0.5)
dbinom(15, size = 24, prob = 0.5)
2*sum(sapply(1:9, function(k) lchoose(24, k)))
2*(0.5^24)*sum(sapply(1:9, function(k) lchoose(24, k)))
2*(0.5^24)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^10)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^9)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^8)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^9)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^9)*sum(sapply(1:24, function(k) lchoose(24, k)))
2*(0.5^24)*sum(sapply(1:24, function(k) lchoose(24, k)))
lchoose(12, 4)
lchoose(4, 12)
lchoose(12, 4)
lchoose(12, 4) * (0.2^4) * (0.8^8)
lchoose(12, 4) * (0.2^4) * (0.8^8)
dbinom(4, size = 12, prob = 0.2)
lchoose(12, 4) * (0.2^4) * (0.8^8)
dbinom(4, size = 12, prob = 0.2)
2*(0.5^24)*sum(sapply(1:24, function(k) choose(24, k)))
2*(0.5^24)*sum(sapply(1:9, function(k) choose(24, k)))
pbinom(9, size = 24, prob = 0.5)
df.cont <- df %>%
mutate(H.A.correct = 1 - abs(H.A - Truth),
H.B.correct = 1 - abs(H.B - Truth))
table(df.cont$H.A.correct, df.cont$H.B.correct)
2*(0.5^24)*sum(sapply(1:9, function(k) choose(24, k)))
pbinom(9, size = 24, prob = 0.5)
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
library(shinyBS)
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
source('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files/BioMAPS_UI.R', echo=TRUE)
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
version
install.packages(c("shiny", "shinyAce"))
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shinyBS::bsAlert()
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Titles = list(SexGender = 'only male and female students are included, so students are not
identifiable',
URMStatus = 'students who self-identify as white/caucasian or asian are considered
to be in the majority group; all other students are considered URM',
ParentEducation = 'students whose parents did not attend any college are considered
first generation students',
ClassStanding = 'sophomores, juniors, seniors, and more advanced students are grouped
together as BFY students to reduce the risk of identifying students',
Major = 'majors are collapsed into those who intend to major in the life sciences and
those who do not',
TransferStatus = 'transfer students include those who completed some college courses at
another institution',
ELL = 'english language learners are those who indicated that their primary language
growing up was a language other than english')
Titles["SexGender"]
Titles["SexGender"]$SexGender
Titles[1]
Titles[["SexGender"]]
runApp()
str(Titles[["SexGender"]])
runApp()
as.character(Titles[["SexGender"]])
runApp()
Option = 'SexGender'
paste("$('[type = radio][value = ", Option, "]').closest('label').attr('title',", Titles[[Option]], ")", sep = '')
paste("$('[type = radio][value = ", Option, "]').closest('label').attr('title',", as.character(Titles[[Option]]), ")", sep = '')
paste("$('[type = radio][value = ", Option, "]').closest('label').attr('title', '", Titles[[Option]], "')", sep = '')
runApp()
runApp()
shiny::runApp()
library(shinyhelper)
shinyhelper_demo()
create_help_files(files = c("Clusters", "Columns", "PlotHelp"),
help_dir = "helpfiles")
shinyhelper_demo()
create_help_files(files = c("downloads"),
help_dir = "helpfiles")
runApp()
runApp()
runApp()
runApp()
runApp()
