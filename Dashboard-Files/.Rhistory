Class.Kansas216 <- c('R_DnPBuVnC0UjmC1b', 'R_1eRcOhZpre7mhcC')
Class.Agnes <- c('R_1n7wUeClpEuZOkp', 'R_2Cmq05OZWF8UESV')
Class.BYU108 <- c('R_22ufgL2VQq1l4Ft', 'R_3KIXxDs5O6DnoMq')
Class.Lewis36500 <- c('R_1PRvAep4UEZKmoi', 'R_27CipGINp6thKIv')
Class.RIT315 <- c('R_2ZHxPCqVAMndXfg', 'R_3m1NHkNcsBNgfe6')
Class.Salem <- c('R_sRwOfzbp6ufaWU9', 'R_2cC5NePDupfT60Q')
Class.Kansas316 <- c('R_3FLrT3FNDbu41vG', 'R_3DvXkKcsXGosQmN')
Class.Penn457 <- c('R_2e4l3ULT10sYMsf', 'R_24q0K2G7CvLBC90', 'R_3q88ROCl8ybpqTf')
Class.Bethel292 <- c('R_1E6g9AAGCZcNC4z', 'R_XH3AUfCAn0ph6Hn')
Class.Barnard <- c('R_2dpdvS27mTkVwG3', 'R_2Cx014FHcWCOw9u')
Classes <- list(Class.1112, Class.1116, Class.2213, Class.2214, Class.2218, Class.510, Class.Maine121, Class.App2210, Class.RIT316, Class.SFU233, Class.Kansas216, Class.Agnes, Class.BYU108, Class.Lewis36500, Class.RIT315, Class.Salem, Class.Kansas316, Class.Penn457, Class.Bethel292, Class.Barnard)
i = 1
for(class in Classes){
df.pre <- df.pre[Class_ID %in% class, Class := as.character(i)]
i = i + 1
}
for(j in 1:(i - 1)){
print(j)
df <- df.pre %>%
filter(Class == j)
print(anova(lm(TotalScores ~ Class_ID, df)))
}
df.pre <- df.pre %>%
mutate(Class = case_when(
Class == 1 ~ 'P1112',
Class == 2 ~ 'P1116',
Class == 3 ~ 'P2213',
Class == 4 ~ 'P2214',
Class == 5 ~ 'P2218',
Class == 6 ~ 'P510',
TRUE ~ Class
))
df.pre.Cornell  <- df.pre %>%
filter(grepl('P', Class))
data_summary <- function(x) {
m <- mean(x)
ymin <- m - 1.96 * sd(x)/sqrt(length(x))
ymax <- m + 1.96 * sd(x)/sqrt(length(x))
return(c(y = m,ymin = ymin, ymax = ymax))
}
ggplot(df.pre.Cornell, aes(x = Class_ID, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
facet_grid(~Class, scales = 'free') +
set.theme +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
ylab('Prescore')
df.Experts.1 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/OriginalExperts_Scored.csv') %>%
mutate(Experts = 'Original 78 Experts') %>%
select(TotalScores, Experts)
df.Experts.2 <- fread('C:/Users/Cole/Documents/PLIC_DATA/Experts/Experts_09302019_Scored.csv') %>%
mutate(Experts = 'New 18 Experts') %>%
select(TotalScores, Experts)
df.Experts <- rbind(df.Experts.1, df.Experts.2) %>%
mutate(Experts = relevel(as.factor(Experts), ref = 'Original 78 Experts'))
df.Experts %>%
group_by(Experts) %>%
summarize(Avg = mean(TotalScores), std = sd(TotalScores)/sqrt(n()), N = n())
t.test(TotalScores ~ Experts, df.Experts)
ggplot(df.Experts, aes(x = Experts, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
set.theme +
theme(axis.title.x = element_blank()) +
ylab('Total Score')
df.pre.courseInfo <- Merge.CIS(df.pre, Matched = FALSE)
head(df.pre.courseInfo)
table(df.pre.courseInfo$Lab_Level, exclude = NULL)
df.pre.courseInfo %>%
group_by(Lab_Level) %>%
summarize(mean(TotalScores))
df.Expertise <- rbind(df.pre.courseInfo %>%
filter(Lab_Level == 'Intro-Algebra') %>%
select(Lab_Level, TotalScores),
df.pre.Cornell %>%
filter(Class == 'P1116' | Class == 'P510') %>%
mutate(Lab_Level = Class) %>%
select(Lab_Level, TotalScores),
df.Experts %>%
mutate(Lab_Level = 'Experts') %>%
select(Lab_Level, TotalScores)) %>%
mutate(Lab_Level = factor(Lab_Level, levels = c('Intro-Algebra', 'P1116', 'P510', 'Experts')))
df.Expertise %>%
group_by(Lab_Level) %>%
summarize(mean(TotalScores))
ggplot(df.Expertise, aes(x = Lab_Level, y = TotalScores)) +
geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
theme_classic(base_size = 15) +
theme(axis.title.x = element_blank()) +
ylab('Prescore') +
scale_x_discrete(labels = c('Algebra-based classes', 'Physics 1116', 'Physics 6510', 'Expert Physicists'))
df.Matched <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
filter(Survey_x == 'C' & Survey_y == 'C') %>%
data.table(.)
Pre1116.Intervention.IDS <- read.xlsx('C:/Users/Cole/Documents/GRA_Summer2018/Surveys/Fall2017/PRE/Fall2017_Cornell_University_1116_Smith_PRE_R_1Oko8BpPfb9rt0G_180202_I.xlsx', sheet = 1) %>%
filter(Intervention == 1) %>%
select(V1)
Post1116.Intervention.IDS <- read.xlsx('C:/Users/Cole/Documents/GRA_Summer2018/Surveys/Fall2017/POST/Fall2017_Cornell_University_1116_Smith_POST_R_1Oko8BpPfb9rt0G_180202_I.xlsx', sheet = 1) %>%
filter(Intervention == 1) %>%
select(V1)
df.Fall2017.1116 <- df.Matched %>%
filter(Class_ID == 'R_1Oko8BpPfb9rt0G')
df.Fall2017.1116[(df.Fall2017.1116$V1_x %in% Pre1116.Intervention.IDS$V1) |
(df.Fall2017.1116$V1_y %in% Post1116.Intervention.IDS$V1),
'Lab.Type'] <- 'Intervention'
df.Fall2017.1116[is.na(df.Fall2017.1116$Lab.Type), 'Lab.Type'] <- 'Control'
df.Fall2017.1116 %>%
group_by(Lab.Type) %>%
summarize(Avg.Pre = mean(PreScores), Avg.Post = mean(PostScores), N = n())
df.post <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Post_Valid_Concat_Scored.csv')[Survey == 'C']
df.Spring2019.1112 <- df.post %>%
filter(Class_ID == 'R_RKRNIWFu1gZuSPf') %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c))
df.Fall2019.2213 <- df.pre %>%
filter(Class_ID == 'R_31hmnBMkK3Bvc3z') %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c))
Merged.1112.2213 <- inner_join(df.Spring2019.1112, df.Fall2019.2213, by = c('Q5b', 'Q5c'))
t.test(Merged.1112.2213$TotalScores.x, Merged.1112.2213$TotalScores.y, paired = TRUE)
df.Fall2018.1112 <- df.post %>%
filter(Class_ID == 'R_3ijRcPfXo8MUfFj') %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c))
df.Spring2019.2213 <- df.post %>%
filter(Class_ID == 'R_3iLp9MKT4i6bz77') %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c))
Merged.1112.2213 <- inner_join(df.Fall2018.1112, df.Spring2019.2213, by = c('Q5b', 'Q5c')) %>%
mutate(PreScores = TotalScores.x,
PostScores = TotalScores.y,
Class = 'P2213',
Lab.Type = 'Old') %>%
select(Class, Lab.Type, PreScores, PostScores)
Class.2217 <- c('R_12QFe4VQPh6oNW1')
Cornell.Classes <- list(Class.1112, Class.1116, Class.2213, Class.2214, Class.2217, Class.2218)
New.labs <- c('R_2R8MnTyv2jFgPzA', 'R_1IB300CxBKh0Tw7', 'R_RKRNIWFu1gZuSPf', 'R_1qfctSUrYxBOtgG')
i = 1
for(class in Cornell.Classes){
df.Matched <- df.Matched[Class_ID %in% class, Class := as.character(i)]
i = i + 1
}
df.matched.Cornell <- df.Matched %>%
mutate(Class = case_when(
Class == 1 ~ 'P1112',
Class == 2 ~ 'P1116',
Class == 3 ~ 'P2213',
Class == 4 ~ 'P2214',
Class == 5 ~ 'P2217',
Class == 6 ~ 'P2218',
TRUE ~ NA_character_
)) %>%
filter(!is.na(Class))
df.matched.Cornell[df.matched.Cornell$Class_ID %in% New.labs, 'Lab.Type'] <- 'Transformed'
df.matched.Cornell[is.na(df.matched.Cornell$Lab.Type), 'Lab.Type'] <- 'Old'
df.matched.Cornell[df.matched.Cornell$Class_ID == 'R_1Oko8BpPfb9rt0G', 'Lab.Type'] <- df.Fall2017.1116$Lab.Type
df.matched.Cornell <- df.matched.Cornell %>%
mutate(Lab.Type = case_when(
Lab.Type == 'Intervention' ~ 'Transformed',
Lab.Type == 'Control' ~ 'Old',
TRUE ~ Lab.Type))
df.matched.Cornell %>%
group_by(Class, Lab.Type) %>%
summarize(Avg.Pre = mean(PreScores), Avg.Post = mean(PostScores), N = n())
ggplot(df.matched.Cornell %>%
filter((Class == 'P1112' & Lab.Type == 'Transformed') | Class == 'P2213' |
Class == 'P2214') %>%
select(Class, Lab.Type, PreScores, PostScores) %>%
rbind(., Merged.1112.2213) %>%
melt(., id.vars = c('Class', 'Lab.Type'), variable.name = 'Survey', value.name = 'Score'),
aes(x = Survey, y = Score, color = Lab.Type, group = Lab.Type)) +
#geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
stat_summary(fun.data = "data_summary", geom = 'line') +
set.theme +
labs(x = '', y = 'Average Score', color = 'Lab Type') +
facet_grid(~Class) +
scale_color_manual(values = c("#0072b2", "#d55e00")) +
scale_x_discrete(labels = c('Pre', 'Post'))
df.mech <- df.matched.Cornell %>%
filter(Class == 'P1112' | Class == 'P1116')
df.UBC <- df.Matched %>%
filter(Class_ID == 'R_3fNprNmbwV9C4X0' | Class_ID == 'R_6rq9bCkfvLDJEdz') %>%
mutate(Class = case_when(
Class_ID == 'R_3fNprNmbwV9C4X0' ~ 'UBC 119',
Class_ID == 'R_6rq9bCkfvLDJEdz' ~ 'UBC 109'
),
Lab.Type = 'Transformed')
df.mech.UBC <- rbind(df.mech, df.UBC) %>%
mutate(Class = factor(Class, levels = c('UBC 109', 'UBC 119', 'P1112', 'P1116')))
cohen.d(df.mech.UBC[df.mech.UBC$Class == 'UBC 109', 'PreScores'],
df.mech.UBC[df.mech.UBC$Class == 'UBC 109', 'PostScores'], paired = TRUE)
cohen.d(df.mech.UBC[df.mech.UBC$Class == 'UBC 119', 'PreScores'],
df.mech.UBC[df.mech.UBC$Class == 'UBC 119', 'PostScores'], paired = TRUE)
cohen.d(df.mech.UBC[(df.mech.UBC$Class == 'P1112') & (df.mech.UBC$Lab.Type == 'Transformed'),
'PreScores'],
df.mech.UBC[(df.mech.UBC$Class == 'P1112') & (df.mech.UBC$Lab.Type == 'Transformed'),
'PostScores'], paired = TRUE)
cohen.d(df.mech.UBC[(df.mech.UBC$Class == 'P1116') & (df.mech.UBC$Lab.Type == 'Transformed'),
'PreScores'],
df.mech.UBC[(df.mech.UBC$Class == 'P1116') & (df.mech.UBC$Lab.Type == 'Transformed'),
'PostScores'], paired = TRUE)
cohen.d(df.mech.UBC[(df.mech.UBC$Class == 'P1112') & (df.mech.UBC$Lab.Type == 'Old'),
'PreScores'],
df.mech.UBC[(df.mech.UBC$Class == 'P1112') & (df.mech.UBC$Lab.Type == 'Old'),
'PostScores'], paired = TRUE)
cohen.d(df.mech.UBC[(df.mech.UBC$Class == 'P1116') & (df.mech.UBC$Lab.Type == 'Old'),
'PreScores'],
df.mech.UBC[(df.mech.UBC$Class == 'P1116') & (df.mech.UBC$Lab.Type == 'Old'),
'PostScores'], paired = TRUE)
df.mech.UBC.melt <- df.mech.UBC %>%
select(Class, Lab.Type, PreScores, PostScores) %>%
melt(., id.vars = c('Class', 'Lab.Type'), variable.name = 'Survey', value.name = 'Score')
ggplot(df.mech.UBC.melt, aes(x = Survey, y = Score, color = Lab.Type, group = Lab.Type)) +
#geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
stat_summary(fun.data = "data_summary", geom = 'line') +
theme_classic(base_size = 18) +
facet_grid(~Class) +
labs(x = '', y = 'Average Score', color = 'Lab Type') +
scale_color_manual(values = c("#0072b2", "#d55e00")) +
scale_x_discrete(labels = c('Pre', 'Post'))
ggplot(df.mech.UBC.melt %>%
filter(Lab.Type == 'Transformed'), aes(x = Survey, y = Score, color = Lab.Type, group = Lab.Type)) +
#geom_violin() +
stat_summary(fun.data = "data_summary", geom = 'pointrange') +
stat_summary(fun.data = "data_summary", geom = 'line') +
theme_classic(base_size = 18) +
facet_grid(~Class) +
labs(x = '', y = 'Average Score', color = 'Lab Type') +
scale_color_manual(values = c("#d55e00")) +
scale_x_discrete(labels = c('Pre', 'Post'))
df.mech.stand <- df.mech %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE))
df.pre.Cornell %>%
filter((Class == 'P2213') | (Class == 'P2218')) %>%
group_by(Class_ID) %>%
summarize(Avg = mean(TotalScores), N = n())
df.ECLASS <- fread('C:/Users/Cole/Documents/ECLASS_DATA/ECLASS_Merged_Concat.csv') %>%
mutate(Q3_1_TEXT_x = tolower(Q3_1_TEXT_x),
Q3_2_TEXT_x = tolower(Q3_2_TEXT_x),
Q3_3_TEXT_x = tolower(Q3_3_TEXT_x))
head(df.ECLASS)
df.PLIC.ECLASS <- df.pre.Cornell %>%
mutate(Q5a = tolower(Q5a),
Q5b = tolower(Q5b),
Q5c = tolower(Q5c)) %>%
inner_join(., df.ECLASS, by = c('Class' = 'Course', 'Q5c' = 'Q3_1_TEXT_x', 'Q5b' = 'Q3_2_TEXT_x')) %>%
filter(!duplicated(.[, 'V1_x']))
cor(df.PLIC.ECLASS$TotalScores, df.PLIC.ECLASS$Student_Score_x)
df.pre <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Pre_Valid_Concat_Scored.csv')[Survey == 'C']
df.post <- fread('C:/Users/Cole/Documents/GitHub/PLIC/PLIC-StudentLevel-Compare/Post_Valid_Concat_Scored.csv')[Survey == 'C']
ScoresList <- c('Q1Bs', 'Q1Ds', 'Q1Es', 'Q2Bs', 'Q2Ds', 'Q2Es', 'Q3Bs', 'Q3Ds', 'Q3Es', 'Q4Bs')
df.valid <- rbind(df.pre, df.post) %>%
filter(!is.na(TotalScores) & (!is.na(Q3c))) %>%
select(ScoresList, Class_ID)
df.valid[is.na(df.valid)] <- 0
PLIC.model.HYP <- ' models  =~ Q1Bs + Q2Bs + Q3Bs + Q3Ds
methods =~ Q1Ds + Q2Ds + Q4Bs
actions =~ Q1Es + Q2Es + Q3Es '
fit1 <- cfa(PLIC.model.HYP, data = df.valid, std.lv = TRUE, estimator = 'ML')
fit2 <- cfa(PLIC.model.HYP, data = df.valid, std.lv = TRUE, cluster = 'Class_ID')
#summary(fit1, standardized = TRUE, fit.measures = TRUE)
summary(fit2, standardized = TRUE, fit.measures = TRUE)
#parameterEstimates(fit1, standardized = TRUE)
parameterEstimates(fit2, standardized = TRUE)
semPaths(fit1, what = 'diagram', layout = 'tree2', whatLabels = 'std', residuals = FALSE, nCharNodes = 10, edge.color = 'black', edge.label.cex = 1.5, curve = 2, label.scale = FALSE, nodeLabels = c('Q1B', 'Q2B', 'Q3B', 'Q3D', 'Q1D', 'Q2D', 'Q4B', 'Q1E', 'Q2E', 'Q3E', 'Evaluate\nModels', 'Evaluate\nMethods', 'Suggest\nFollow-ups'), rotation = 2, sizeMan = 8, sizeLat = 18, width = 4, height = 5, mar = c(1, 6, 1, 2))
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(Lab_Purpose, levels = c('Reinforce physics concepts',
'Both about equally', 'Develop lab skills')))
df.Matched.courseFY <- df.Matched.course %>%
filter(Lab_Level == 'Intro-Calculus' | Lab_Level == 'Intro-Algebra')
table(df.Matched.courseFY$Lab_Purpose, exclude = NULL)
df.Matched.courseFY %>%
group_by(Lab_Purpose) %>%
summarize(mean(PreScores), mean(PostScores), n())
fit <- lmer(PostScores ~ PreScores_GroupMC + Class_PreScore_GrandMC + Lab_Purpose + (1 | Class_ID), df.Matched.course)
summary(fit)
plot_model(fit, 'eff', show.p = TRUE)
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')
them_set(theme_classic(base_size = 20))
theme_set(theme_classic(base_size = 20))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'w/ prescore', axis.title = '')$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'Marginal effects of lab purpose on postscores', axis.title = '')$Lab_Purpose
theme_set(theme_classic(base_size = 16))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = 'Marginal effects of lab purpose on postscores', axis.title = '')$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = '', axis.title = c('Lab Purpose', 'Predicted postscore'))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.95, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills', 'Skills', 'Concepts')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c(Both about equally = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = list('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = c('Both about equally' = 'Concepts & Skills')))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(case_when(
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
Lab_Purpose == 'Both about equally' ~ 'Concepts & Skills',
Lab_Purpose == 'Develop lab skills' ~ 'Skills'
), ref = 'Concepts'))
df.Matched.course <- Merge.CIS(df.Matched) %>%
Create.Class.Variables(.) %>%
mutate(PostScores.scaled = scale(PostScores, scale = TRUE),
Lab_Purpose = factor(case_when(
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
Lab_Purpose == 'Both about equally' ~ 'Concepts & Skills',
Lab_Purpose == 'Develop lab skills' ~ 'Skills'
), levels = c('Concepts', 'Skills', 'Concepts & Skills')))
df.Matched.courseFY <- df.Matched.course %>%
filter(Lab_Level == 'Intro-Calculus' | Lab_Level == 'Intro-Algebra')
table(df.Matched.courseFY$Lab_Purpose, exclude = NULL)
df.Matched.courseFY %>%
group_by(Lab_Purpose) %>%
summarize(mean(PreScores), mean(PostScores), n())
fit <- lmer(PostScores ~ PreScores_GroupMC + Class_PreScore_GrandMC + Lab_Purpose + (1 | Class_ID), df.Matched.course)
summary(fit)
theme_set(theme_classic(base_size = 16))
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
plot_model(fit, type = 'eff', dot.size = 6, line.size = 1, ci.lvl = 0.67, title = '', axis.title = c('Lab Purpose', 'Predicted postscore', axis.labels = ""))$Lab_Purpose
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
library(car)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment) {
df <- fread(File)
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))] %>%
select(Class_Standing, Gender, URM_Status, First_Gen_Status, AP_Calculus_AB, AP_Calculus_BC, ACT_SAT_Math_Percentile, PreScores, PostScores, Season, Sequence, Course_Content, Class) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE))) %>%
filter(!is.na(URM_Status) & !is.na(Class_Standing) & !is.na(ACT_SAT_Math_Percentile))
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
vif(df.PLIC.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
vif(df.ECLASS.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
vif(df.MBT.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
vif(df.CSEM.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM')) %>%
filter(term == 'GenderF' | term == 'URM_StatusURM' | term == 'Class_StandingBFY' | term == 'First_Gen_StatusFirstGen') %>%
mutate(Model = as.character(Model),
Assessment = factor(Assessment, levels = c('MBT', 'CSEM', 'E-CLASS', 'PLIC')))
ggplot(Coefs, aes(x = Model, y = estimate, group = term, color = term)) +
geom_point(aes(shape = term), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15,
size = 1) +
geom_line(size = 1) +
facet_grid(rows = vars(Assessment), scales = "free") +
theme_classic(base_size = 16) +
theme(legend.title = element_blank()) +
scale_color_discrete(labels = c('Class standing', 'First-gen status', 'Gender', 'URM status')) +
ylab('Coefficient')
# ggplot(Coefs, aes(x = Model, y = estimate, group = Assessment, color = Assessment)) +
#   geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
#   geom_line() +
#   facet_grid(cols = vars(term))
df.MBT.fit5.lm <- lm(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Class, data = df.MBT)
summary(df.MBT.fit5$model)
stargazer(df.MBT.fit5$model, df.MBT.fit5.lm, intercept.bottom = FALSE, out = paste('MBT_LMcomp.tex'), intercept.top = TRUE, omit.stat = 'all')
df.PLIC.fit5.lm <- lm(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + Class, data = df.PLIC)
summary(df.PLIC.fit5.lm)
library(tidyverse)
library(data.table)
library(openxlsx)
library(lavaan)
library(semPlot)
library(effsize)
library(lmerTest)
library(sjPlot)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
set.theme <- theme_classic(base_size = 20)
df.Matched <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv')
df.Matched2 <- df.Matched %>% filter(Survey_x == 'C' | Survey_y == 'C')
7033-6836
shiny::runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
runApp('C:/Users/Cole/Documents/GitHub/BIO-MAPS/Dashboard-Files')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
df.Class2 <- callModule(DownloadClassData, 'Class2.Download', data = df, header = header.df,
cols = cols, ass = Assessment)
shiny::runApp()
runApp()
